;;;
;;; gauche_quesoglclib.stub
;;;

"
#include \"gauche_quesoglc.h\"
#include <GL/glc.h>
"

(define-cise-stmt WITH-NEW-LIST
  [(_ start last . action)
   `(let* ((,start :: ScmObj SCM_NIL)
           (,last :: ScmObj SCM_NIL))
      ,@action
      (result ,start))])

(define-cise-stmt RESULT-AS-MAYBE
  [(_ val) 
   `(if (== 0 ,val) (result SCM_FALSE) (result SCM_UNDEFINED))]
  [(_ false val) 
   `(if (== ,false ,val) (result SCM_FALSE) (result SCM_UNDEFINED))])

(define-cise-stmt RESULT-AS-BOOLEAN
  [(_ val) 
   `(if (== 0 ,val) (result SCM_FALSE) (result SCM_TRUE))]
  [(_ false val) 
   `(if (== ,false ,val) (result SCM_FALSE) (result SCM_TRUE))])

(define-constant GLC_NONE                                  #x0000)

(define-constant GLC_AUTO_FONT                             #x0010)
(define-constant GLC_GL_OBJECTS                            #x0011)
(define-constant GLC_MIPMAP                                #x0012)

(define-constant GLC_OP_glcUnmappedCode                    #x0020)

(define-constant GLC_BASELINE                              #x0030)
(define-constant GLC_BOUNDS                                #x0031)

(define-constant GLC_PARAMETER_ERROR                       #x0040)
(define-constant GLC_RESOURCE_ERROR                        #x0041)
(define-constant GLC_STATE_ERROR                           #x0042)

(define-constant GLC_CHAR_LIST                             #x0050)
(define-constant GLC_FACE_LIST                             #x0051)

(define-constant GLC_FAMILY                                #x0060)
(define-constant GLC_MASTER_FORMAT                         #x0061)
(define-constant GLC_VENDOR                                #x0062)
(define-constant GLC_VERSION                               #x0063)

(define-constant GLC_CHAR_COUNT                            #x0070)
(define-constant GLC_FACE_COUNT                            #x0071)
(define-constant GLC_IS_FIXED_PITCH                        #x0072)
(define-constant GLC_MAX_MAPPED_CODE                       #x0073)
(define-constant GLC_MIN_MAPPED_CODE                       #x0074)
(define-constant GLC_IS_OUTLINE                            #x0075)

(define-constant GLC_CATALOG_LIST                          #x0080)

(define-constant GLC_CURRENT_FONT_LIST                     #x0090)
(define-constant GLC_FONT_LIST                             #x0091)
(define-constant GLC_LIST_OBJECT_LIST                      #x0092)
(define-constant GLC_TEXTURE_OBJECT_LIST                   #x0093)

(define-constant GLC_DATA_POINTER                          #x00A0)

(define-constant GLC_EXTENSIONS                            #x00B0)
(define-constant GLC_RELEASE                               #x00B1)

(define-constant GLC_RESOLUTION                            #x00C0)

(define-constant GLC_BITMAP_MATRIX                         #x00D0)

(define-constant GLC_CATALOG_COUNT                         #x00E0)
(define-constant GLC_CURRENT_FONT_COUNT                    #x00E1)
(define-constant GLC_FONT_COUNT                            #x00E2)
(define-constant GLC_LIST_OBJECT_COUNT                     #x00E3)
(define-constant GLC_MASTER_COUNT                          #x00E4)
(define-constant GLC_MEASURED_CHAR_COUNT                   #x00E5)
(define-constant GLC_RENDER_STYLE                          #x00E6)
(define-constant GLC_REPLACEMENT_CODE                      #x00E7)
(define-constant GLC_STRING_TYPE                           #x00E8)
(define-constant GLC_TEXTURE_OBJECT_COUNT                  #x00E9)
(define-constant GLC_VERSION_MAJOR                         #x00EA)
(define-constant GLC_VERSION_MINOR                         #x00EB)

(define-constant GLC_BITMAP                                #x0100)
(define-constant GLC_LINE                                  #x0101)
(define-constant GLC_TEXTURE                               #x0102)
(define-constant GLC_TRIANGLE                              #x0103)

(define-constant GLC_UCS1                                  #x0110)
(define-constant GLC_UCS2                                  #x0111)
(define-constant GLC_UCS4                                  #x0112)


;;;
(define-cproc glc-context (in-context::<fixnum>) ::<void>
  (glcContext (cast GLint in-context)))

(define-cproc glc-delete-context (in-context::<fixnum>) ::<void>
  (glcDeleteContext (cast GLint in-context)))

(define-cproc glc-gen-context () ::<fixnum>
  (result (cast int (glcGenContext))))

(define-cproc glc-get-all-contexts () 
  (WITH-NEW-LIST start last
                 (let* ((a::GLint* (glcGetAllContexts))
                        (i::int 0))
                   (for ((= i 0) (!= 0 (aref a i)) (+= i 1))
                        (SCM_APPEND1 start last (SCM_MAKE_INT (aref a i)))))))

(define-cproc glc-get-current-context () 
  (result (SCM_MAKE_INT (glcGetCurrentContext))))

;; GLCAPI GLCenum APIENTRY glcGetError (void);
(define-cfn make_symbol (cstr::(const char*))
  (return (Scm_MakeSymbol (SCM_STRING (SCM_MAKE_STR_IMMUTABLE cstr)) TRUE)))

(define-cproc glc-get-error () 
  (let* ((r::GLCenum  (glcGetError)))
    (cond ((== GLC_NONE r) (result (make_symbol "none")))
          ((== GLC_PARAMETER_ERROR r) (result (make_symbol "paramater-error")))
          ((== GLC_RESOURCE_ERROR r) (result (make_symbol "resource-error")))
          ((== GLC_STATE_ERROR r) (result (make_symbol "state-error")))
          (else (result SCM_FALSE)))))

(define-cproc glc-is-context? (inContext::<int>)
  (RESULT-AS-BOOLEAN GL_FALSE (glcIsContext (cast GLint inContext))))
;; GLCAPI void APIENTRY glcCallbackFunc (GLCenum inOpcode, GLCfunc inFunc);
;; GLCAPI void APIENTRY glcDataPointer (GLvoid *inPointer);
;; GLCAPI void APIENTRY glcDeleteGLObjects (void);
(define-cproc glc-enable (inAttrib::<int>) ::<void>
  (glcEnable (cast GLCenum inAttrib)))
(define-cproc glc-disable (inAttrib::<int>) ::<void>
  (glcDisable (cast GLCenum inAttrib)))
;; GLCAPI GLCfunc APIENTRY glcGetCallbackFunc (GLCenum inOpcode);
;; GLCAPI const GLCchar* APIENTRY glcGetListc (GLCenum inAttrib, GLint inIndex);
;; GLCAPI GLint APIENTRY glcGetListi (GLCenum inAttrib, GLint inIndex);
;; GLCAPI GLvoid* APIENTRY glcGetPointer (GLCenum inAttrib);
;; GLCAPI const GLCchar* APIENTRY glcGetc (GLCenum inAttrib);
;; GLCAPI GLfloat APIENTRY glcGetf (GLCenum inAttrib);
;; GLCAPI GLfloat* APIENTRY glcGetfv (GLCenum inAttrib, GLfloat *outVec);
;; GLCAPI GLint APIENTRY glcGeti (GLCenum inAttrib);

(define-cproc glc-is-enabled? (inAttrib::<int>)
  (RESULT-AS-BOOLEAN GL_FALSE (glcIsEnabled (cast GLCenum inAttrib))))
  
;; GLCAPI GLboolean APIENTRY glcIsEnabled (GLCenum inAttrib);

(define-cproc glc-string-type (inStringType::<int>) ::<void>
  (glcStringType (cast GLCenum inStringType)))

(define-cproc glc-append-catalog (in-catalog::<string>) ::<void>
  (glcAppendCatalog (cast GLCchar* (Scm_GetStringConst in-catalog))))

;; GLCAPI const GLCchar* APIENTRY glcGetMasterListc (GLint inMaster,
;; 						  GLCenum inAttrib,
;; 						  GLint inIndex);
;; GLCAPI const GLCchar* APIENTRY glcGetMasterMap (GLint inMaster, GLint inCode);
;; GLCAPI const GLCchar* APIENTRY glcGetMasterc (GLint inMaster, GLCenum inAttrib);
;; GLCAPI GLint APIENTRY glcGetMasteri (GLint inMaster, GLCenum inAttrib);
;; GLCAPI void APIENTRY glcPrependCatalog (const GLCchar *inCatalog);
;; GLCAPI void APIENTRY glcRemoveCatalog (GLint inIndex);

(define-cproc glc-append-font (inFont::<fixnum>) ::<void>
  (glcAppendFont (cast GLint inFont)))

(define-cproc glc-delete-font (inFont::<fixnum>) ::<void>
  (glcDeleteFont (cast GLint inFont)))

(define-cproc glc-font (inFont::<fixnum>) ::<void>
  (glcFont (cast GLint inFont)))

(define-cproc glc-font-face (inFont::<fixnum> inFace::<string>)
  (let* ((cstr::(const GLCchar*) (cast (const GLCchar*) (Scm_GetStringConst inFace))))
    (RESULT-AS-MAYBE GL_FALSE (glcFontFace inFont cstr))))


;; GLCAPI void APIENTRY glcFontMap (GLint inFont, GLint inCode,
;; 				 const GLCchar *inCharName);
(define-cproc glc-gen-font-id () ::<int>
  (result (cast int (glcGenFontID))))

(define-cproc glc-get-font-face (inFont::<int>) 
  (result (SCM_MAKE_STR_COPYING (glcGetFontFace (cast GLint inFont)))))


(define-cise-stmt DEFINE-FONT-LISTC
  ([_ fonti font-listc]
   `(WITH-NEW-LIST start last
                   (dotimes (i (glcGetFonti inFont ,fonti))
                     (let* ((r::(const GLCchar*) 
                                (glcGetFontListc (cast GLint inFont)
                                                 ,font-listc
                                                 (cast GLint i)))
                            (str::ScmObj (SCM_MAKE_STR_COPYING (cast (const char*) r))))
                       (SCM_APPEND1 start last str))))))

(define-cproc glc-char-list (inFont::<int>)
  (DEFINE-FONT-LISTC GLC_CHAR_COUNT GLC_CHAR_LIST))

(define-cproc glc-face-list (inFont::<int>)
  (DEFINE-FONT-LISTC  GLC_FACE_COUNT GLC_FACE_LIST))


;; GLCAPI const GLCchar* APIENTRY glcGetFontMap (GLint inFont, GLint inCode);
;; GLCAPI const GLbyte* APIENTRY glcGetFontMasterArray (GLint inFont,
;; 						     GLboolean inFull,
;; 						     GLint *outCount);

(define-cproc glc-get-fontc (inFont::<int> inAttrib::<int>)
  (result (SCM_MAKE_STR_COPYING 
           (cast (const char*)
                 (glcGetFontc (cast GLint inFont) (cast GLCenum inAttrib))))))

(define-cproc glc-get-fonti (inFont::<int> inAttrib::<int>)
  (result (SCM_MAKE_INT (glcGetFonti (cast GLint inFont) (cast GLCenum inAttrib)))))

(define-cproc glc-is-font? (inFont::<int>)
  (RESULT-AS-BOOLEAN GL_FALSE (glcIsFont (cast GLint inFont))))

(define-cproc glc-new-font-from-family (inFont::<fixnum> inFamily::<string>)
  (let* ((cstr::(const GLCchar*)  (cast (const GLCchar*) (Scm_GetString inFamily))))
    (RESULT-AS-MAYBE 0 (glcNewFontFromFamily (cast GLint inFont) cstr))))

(define-cproc glc-catalog-list ()
  (WITH-NEW-LIST start last
                 (let* ((size::int (cast int (glcGeti GLC_CATALOG_COUNT))))
                   (dotimes (i size)
                     (let* ((cstr::(const char*) (cast (const char*) (glcGetListc GLC_CATALOG_LIST i))))
                       (SCM_APPEND1 start last 
                                    (Scm_MakeString cstr -1 -1 SCM_STRING_COPYING)))))))

(define-cise-stmt DEFINE-GET-LISTI
  ([_ geti get-listi]
   `(WITH-NEW-LIST start last
                   (let* ((size::int (cast int (glcGeti ,geti))))
                     (dotimes (i size)
                       (let* ((e::int (glcGetListi ,get-listi i)))
                         (SCM_APPEND1 start last (SCM_MAKE_INT e))))))))

(define-cproc  glc-current-font-list ()
  (DEFINE-GET-LISTI GLC_CURRENT_FONT_COUNT GLC_CURRENT_FONT_LIST))
(define-cproc  glc-font-list ()
  (DEFINE-GET-LISTI GLC_FONT_COUNT GLC_FONT_LIST))
(define-cproc glc-list-object-list ()
  (DEFINE-GET-LISTI GLC_LIST_OBJECT_COUNT GLC_LIST_OBJECT_LIST))
(define-cproc glc-texture-object-list ()
  (DEFINE-GET-LISTI GLC_TEXTURE_OBJECT_COUNT GLC_TEXTURE_OBJECT_LIST))

;; GLCAPI GLint APIENTRY glcNewFontFromMaster (GLint inFont, GLint inMaster);

;; GLCAPI void APIENTRY glcLoadIdentity (void);
(define-cproc glc-load-identity () ::<void>
  (glcLoadIdentity))
;; GLCAPI void APIENTRY glcLoadMatrix (const GLfloat *inMatrix);
;; GLCAPI void APIENTRY glcMultMatrix (const GLfloat *inMatrix);
;; GLCAPI void APIENTRY glcRotate (GLfloat inAngle);

(define-cproc glc-scale (inX::<float> inY::<float>) ::<void>
  (glcScale (cast GLfloat inX) (cast GLfloat inY)))
;; GLCAPI void APIENTRY glcRenderChar (GLint inCode);
;; GLCAPI void APIENTRY glcRenderCountedString (GLint inCount,
;; 					     const GLCchar *inString);

(define-cproc glc-render-string (instr::<string>) ::<void>
  (glcRenderString (cast (const GLCchar*) (Scm_GetStringConst instr))))

;; GLCAPI void APIENTRY glcRenderStyle (GLCenum inStyle);
(define-cproc glc-render-style (instyle::<int>) ::<void>
  (glcRenderStyle (cast GLCenum instyle)))
  
;; GLCAPI void APIENTRY glcReplacementCode (GLint inCode);
;; GLCAPI void APIENTRY glcResolution (GLfloat inVal);
(define-type <f32vector> "ScmF32Vector*")
(define-cproc glc-get-char-metric! (inCode::<int> inMetric::<int> outVec::<f32vector>) ::<f32vector>
  (glcGetCharMetric (cast GLint inCode) (cast GLCenum inMetric)
                    (cast GLfloat* (SCM_F32VECTOR_ELEMENTS outVec)))
  (result outVec))

(define-cproc glc-get-max-char-metric! (inMetric::<int> outVec::<f32vector>) ::<f32vector>
  (glcGetMaxCharMetric (cast GLCenum inMetric)
                       (cast GLfloat* (SCM_F32VECTOR_ELEMENTS outVec)))
  (result outVec))

(define-cproc glc-get-string-char-metric! (inIndex::<int> inMetric::<int> outVec::<f32vector>) ::<f32vector>
  (glcGetStringCharMetric (cast GLint inIndex) (cast GLCenum inMetric)
                    (cast GLfloat* (SCM_F32VECTOR_ELEMENTS outVec)))
  (result outVec))

(define-cproc glc-get-string-metric! (inMetric::<int> outVec::<f32vector>) ::<f32vector>
  ;;castが面倒になった
  (glcGetStringMetric inMetric (SCM_F32VECTOR_ELEMENTS outVec))
  (result outVec))
;; GLCAPI GLfloat* APIENTRY glcGetStringMetric (GLCenum inMetric, GLfloat *outVec);

;; GLCAPI GLint APIENTRY glcMeasureCountedString (GLboolean inMeasureChars,
;; 					       GLint inCount,
;; 					       const GLCchar *inString);

(define-cproc glc-measure-string (inMeasureChars::<int>  inString::<string>)
  (RESULT-AS-MAYBE
   (glcMeasureString (cast GLboolean inMeasureChars)
                     (cast (const GLCchar*) (Scm_GetStringConst inString)))))


;; /*************************************************************/

(define-constant GLC_SGI_ufm_typeface_handle               1)
(define-constant GLC_UFM_TYPEFACE_HANDLE_SGI               #x8001)
(define-constant GLC_UFM_TYPEFACE_HANDLE_COUNT_SGI         #x8003)
;; GLCAPI GLint APIENTRY glcGetMasterListiSGI(GLint inMaster, GLCenum inAttrib,
;; 					   GLint inIndex);
;; GLCAPI GLint APIENTRY glcGetFontListiSGI(GLint inFont, GLCenum inAttrib,
;; 					 GLint inIndex);

(define-constant GLC_SGI_full_name                         1)
(define-constant GLC_FULL_NAME_SGI                         #x8002)

(define-constant GLC_QSO_utf8                              1)
(define-constant GLC_UTF8_QSO                              #x8004)

(define-constant GLC_QSO_hinting                           1)
(define-constant GLC_HINTING_QSO                           #x8005)

(define-constant GLC_QSO_extrude                           1)
(define-constant GLC_EXTRUDE_QSO                           #x8006)

(define-constant GLC_QSO_kerning                           1)
(define-constant GLC_KERNING_QSO                           #x8007)

(define-constant GLC_QSO_matrix_stack                      1)
(define-constant GLC_MATRIX_STACK_DEPTH_QSO                #x8008)
(define-constant GLC_MAX_MATRIX_STACK_DEPTH_QSO            #x8009)
(define-constant GLC_STACK_OVERFLOW_QSO                    #x800A)
(define-constant GLC_STACK_UNDERFLOW_QSO                   #x800B)
;; GLCAPI void APIENTRY glcPushMatrixQSO(void);
;; GLCAPI void APIENTRY glcPopMatrixQSO(void);

(define-constant GLC_QSO_attrib_stack                      1)
(define-constant GLC_ENABLE_BIT_QSO                        #x00000001)
(define-constant GLC_RENDER_BIT_QSO                        #x00000002)
(define-constant GLC_STRING_BIT_QSO                        #x00000004)
(define-constant GLC_GL_ATTRIB_BIT_QSO                     #x00000008)
(define-constant GLC_ALL_ATTRIB_BITS_QSO                   #x0000FFFF)
(define-constant GLC_ATTRIB_STACK_DEPTH_QSO                #x800C)
(define-constant GLC_MAX_ATTRIB_STACK_DEPTH_QSO            #x800D)
;; GLCAPI void APIENTRY glcPushAttribQSO(GLbitfield inMask);
;; GLCAPI void APIENTRY glcPopAttribQSO(void);

(define-constant GLC_QSO_buffer_object                     1)
(define-constant GLC_BUFFER_OBJECT_COUNT_QSO               #x800E)
(define-constant GLC_BUFFER_OBJECT_LIST_QSO                #x800F)

;; The following entry is a dummy one.
;; Replace it for your definitions.

(define-cproc test-gauche_quesoglc () ::<const-cstring>
  (result "gauche_quesoglc is working"))


;; Local variables:
;; mode: scheme
;; end:
